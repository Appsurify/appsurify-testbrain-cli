name: "Test"

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - "main"

jobs:
  run-pytests:
    name: pytest on ${{ matrix.os }} / Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.image }}
    strategy:
      fail-fast: false
      matrix:
        os: [Ubuntu, macOS, Windows]
        python-version: ["3.7", "3.8", "3.11"]
        poetry-version: ["1.5.1"]
        include:
          - os: Ubuntu
            image: ubuntu-latest
          - os: Windows
            image: windows-latest
          - os: macOS
            image: macos-latest
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4
      - name: "Set up Python"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: "Set up Poetry"
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: ${{ matrix.poetry-version }}
      - name: "Install dependencies"
        run: poetry install --with test
      - name: "Run tests"
        run: poetry run pytest --exitfirst --verbose --failed-first --junitxml=reports/pytest-junit-report-${{ matrix.os }}-PY${{ matrix.python-version }}.xml --cov=./src/ --cov-report xml:reports/pytest-coverage-report-${{ matrix.os }}-PY${{ matrix.python-version }}.xml
      - name: "Surface failing tests"
        if: always()
        uses: pmeier/pytest-results-action@main
        with:
          path: reports/pytest-junit-report-${{ matrix.os }}-PY${{ matrix.python-version }}.xml
          summary: true
          display-options: fEX
          fail-on-empty: true
      - name: "Upload Artifact"
        uses: actions/upload-artifact@v3
        with:
            name: "reports"
            path: ./reports/
            retention-days: 5

  coverage:
    name: "Coverage"
    runs-on: ubuntu-latest
    needs: run-pytests
    permissions:
      pull-requests: write
      contents: write
      checks: write
      actions: read
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4
      - name: "Download Artifact"
        uses: actions/download-artifact@v3
        with:
          name: "reports"
      - name: "Coverage comment"
        id: coverage_comment
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERAGE_PATH: ./src/
          MERGE_COVERAGE_FILES: true
      - name: "Store Pull Request comment to be posted"
        uses: actions/upload-artifact@v3
        if: steps.coverage_comment.outputs.COMMENT_FILE_WRITTEN == 'true'
        with:
          name: python-coverage-comment-action
          path: python-coverage-comment-action.txt
