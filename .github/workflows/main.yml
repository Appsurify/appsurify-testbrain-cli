name: Push

on:
  push:
    branches:
      - master
      - development
  pull_request:
    branches:
      - '**'

#concurrency:
#  group: tests-${{ github.head_ref || github.ref }}
#  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  tests:
    strategy:
      fail-fast: false
      matrix:
        os: [Ubuntu, macOS, Windows]
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
        include:
          - os: Ubuntu
            image: ubuntu-22.04
          - os: Windows
            image: windows-2022
          - os: macOS
            image: macos-12
    runs-on: ${{ matrix.image }}
    name: ${{ matrix.os }} / ${{ matrix.python-version }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Run image
        uses: abatilo/actions-poetry@v2.1.4
        with:
          poetry-version: ${{ matrix.poetry-version }}
      - name: Install dependencies
        run: poetry install
      - name: Get full Python version
        id: full-python-version
        run: echo version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))") >> $GITHUB_OUTPUT
      - name: Check lock file
        run: poetry check --lock
  code-quality:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
        poetry-version: ["1.6.1"]
        os: [Ubuntu]
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} / ${{ matrix.python-version }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: poetry install
      - name: Run black
        run: poetry run black ./testbrain/ --check
      - name: Run isort
        run: poetry run isort ./testbrain/ --check-only --profile black
      - name: Run flake8
        run: poetry run flake8 ./testbrain/
  qodana:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: write
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}  # to check out the actual pull request commit, not the merge commit
          fetch-depth: 0  # a full history is required for pull request analysis
      - name: 'Qodana Scan'
        uses: JetBrains/qodana-action@v2023.2
        with:
          args: --baseline,qodana.sarif.json
        env:
          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }} # read the steps about it below
